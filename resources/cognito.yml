Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ${self:custom.projectName}-${self:custom.stage}-${self:custom.serviceName}-UserPool
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: False
      UsernameAttributes:
        - email
      MfaConfiguration: OFF
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: False
          RequireUppercase: True
          TemporaryPasswordValidityDays: 7
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: user_name
          Required: false
        - AttributeDataType: String
          Mutable: true
          Name: phone_number
          Required: false
      UsernameConfiguration:
        CaseSensitive: False

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ${self:custom.projectName}-${self:custom.stage}-${self:custom.serviceName}-UserPoolClient
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - https://cognito.com
        - http://localhost:5173
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      LogoutURLs:
        - https://cognito.com
      PreventUserExistenceErrors: ENABLED
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: True
      SupportedIdentityProviders:
        - COGNITO
        - MicrosoftOIDC
        - Google
        # - SignInWithApple
      GenerateSecret: True
      RefreshTokenValidity: 180

  UserPoolGroupAdministrator:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Administrator
      GroupName: admin
      Precedence: 0
      UserPoolId: !Ref UserPool

  UserPoolGroupPracticeManager:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Super Administrator
      GroupName: super_admin
      UserPoolId: !Ref UserPool

  UserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain 
    Properties:
      UserPoolId: !Ref UserPool 
      Domain: "techtix"

  MicrosoftUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: "MicrosoftOIDC"
      ProviderType: "OIDC"
      ProviderDetails:
        client_id: ${ssm:${self:custom.azureADClientId}}
        client_secret: ${ssm:${self:custom.azureADClientSecret}}
        authorize_scopes: "openid profile email"
        oidc_issuer: https://login.microsoftonline.com/${ssm:${self:custom.azureADTenantId}}/v2.0
        authorize_url: https://login.microsoftonline.com/${ssm:${self:custom.azureADTenantId}}/oauth2/v2.0/authorize
        token_url: https://login.microsoftonline.com/${ssm:${self:custom.azureADTenantId}}/oauth2/v2.0/token
        attributes_request_method: "POST"
        jwks_uri: https://login.microsoftonline.com/${ssm:${self:custom.azureADTenantId}}/discovery/v2.0/keys
      AttributeMapping:
        email: "email"
        username: "sub"

  GoogleUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: "Google"
      ProviderDetails:
        client_id: ${ssm:${self:custom.gcpOAuthClientId}}
        client_secret: ${ssm:${self:custom.gcpOAuthClientSecret}}
        authorize_scopes: "profile email openid"
      ProviderType: "Google"
      AttributeMapping:
        email: "email"

  # AppleUserPoolIdentityProvider:
  #   Type: AWS::Cognito::UserPoolIdentityProvider
  #   Properties:
  #     UserPoolId: !Ref UserPool
  #     ProviderName: "SignInWithApple"
  #     ProviderDetails:
  #       client_id: "YourSign"
  #       team_id: "YourAppleTeamId"
  #       key_id: "YourApplePrivateKeyID"
  #       private_key: "YourApplePrivateKey"
  #       authorize_scopes: "public_profile,email"
  #     ProviderType: "SignInWithApple"
  #     AttributeMapping:
  #       email: "email"

  GatewayResponse:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseParameters:
        gatewayresponse.header.WWW-Authenticate: "'Basic'"
      ResponseType: UNAUTHORIZED
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      StatusCode: '401'

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: UserPoolId-${self:custom.stage}

  AppClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: AppClientId-${self:custom.stage}

  BasicAuthAuthorizerARN:
    Value:
      Fn::GetAtt:
        - BasicAuthAuthorizerLambdaFunction
        - Arn
    Export:
      Name: BasicAuthAuthorizerARN-${self:custom.stage}
